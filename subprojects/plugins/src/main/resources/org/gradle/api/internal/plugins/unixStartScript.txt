#!/usr/bin/env bash

#
# Copyright 2015 the original author or authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

##############################################################################
##
##  ${applicationName} start up script for POSIX
##
##############################################################################

# Attempt to set APP_HOME

# Resolve links: \$0 may be a link
app_path="\$0"

# Need this for daisy-chained symlinks.
while
    APP_HOME="\${app_path%"\${app_path##*/}"}"   # leaves a trailing /; empty if no leading path
    [ -h "\$app_path" ]
do
    ls="\$( ls -ld "\$app_path" )"
    link=\${ls#*' -> '}
    case \$link in             #(
      /*)   app_path=\$link ;; #(
      *)    app_path=\$APP_HOME\$link ;;
    esac
done

APP_HOME="\$( cd "\${APP_HOME:-./}${appHomeRelativePath}" && pwd -P )" || exit

APP_NAME="${applicationName}"
APP_BASE_NAME="\${0##*/}"

# Add default JVM options here. You can also use JAVA_OPTS and ${optsEnvironmentVar} to pass JVM options to this script.
DEFAULT_JVM_OPTS=${defaultJvmOpts}

# Use the maximum available, or set MAX_FD != -1 to use that value.
MAX_FD="maximum"

warn () {
    echo "\$*"
}

die () {
    echo
    echo "\$*"
    echo
    exit 1
}

# OS specific support (must be 'true' or 'false').
cygwin=false
msys=false
darwin=false
nonstop=false
case "\$( uname )" in
  CYGWIN* )
    cygwin=true
    ;;
  Darwin* )
    darwin=true
    ;;
  MSYS* | MINGW* )
    msys=true
    ;;
  NONSTOP* )
    nonstop=true
    ;;
esac

CLASSPATH=$classpath
<% if ( mainClassName.startsWith('--module ') ) { %>MODULE_PATH=$modulePath<% } %>

# Determine the Java command to use to start the JVM.
if [ -n "\$JAVA_HOME" ] ; then
    if [ -x "\$JAVA_HOME/jre/sh/java" ] ; then
        # IBM's JDK on AIX uses strange locations for the executables
        JAVACMD="\$JAVA_HOME/jre/sh/java"
    else
        JAVACMD="\$JAVA_HOME/bin/java"
    fi
    if [ ! -x "\$JAVACMD" ] ; then
        die "ERROR: JAVA_HOME is set to an invalid directory: \$JAVA_HOME

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
    fi
else
    JAVACMD="java"
    which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
fi

# Increase the maximum file descriptors if we can.
if [ "\$cygwin" = "false" -a "\$darwin" = "false" -a "\$nonstop" = "false" ] ; then
    MAX_FD_LIMIT=\$( ulimit -H -n )
    if [ \$? -eq 0 ] ; then
        if [ "\$MAX_FD" = "maximum" -o "\$MAX_FD" = "max" ] ; then
            MAX_FD="\$MAX_FD_LIMIT"
        fi
        ulimit -n \$MAX_FD
        if [ \$? -ne 0 ] ; then
            warn "Could not set maximum file descriptor limit: \$MAX_FD"
        fi
    else
        warn "Could not query maximum file descriptor limit: \$MAX_FD_LIMIT"
    fi
fi

# For Darwin, add options to specify how the application appears in the dock
if \$darwin; then
    GRADLE_OPTS="\$GRADLE_OPTS \\"-Xdock:name=\$APP_NAME\\" \\"-Xdock:icon=\$APP_HOME/media/gradle.icns\\""
fi

# For Cygwin or MSYS, switch paths to Windows format before running java
if [ "\$cygwin" = "true" -o "\$msys" = "true" ] ; then
    APP_HOME=\$( cygpath --path --mixed "\$APP_HOME" )
    CLASSPATH=\$( cygpath --path --mixed "\$CLASSPATH" )
<% if ( mainClassName.startsWith('--module ') ) { %>    MODULE_PATH=\$( cygpath --path --mixed "\$MODULE_PATH" )<% } %>
    JAVACMD=\$( cygpath --unix "\$JAVACMD" )

    # Now convert the arguments - kludge to limit ourselves to /bin/sh
    for arg do
        if
            case \$arg in
              -*)   false ;;                            # don't mess with options
              /?*)  t=\${arg#/} t=/\${t%%/*}              # looks like a POSIX filepath
                    [ -d "\$t" ] ;;
              *)    [ -n "\$GRADLE_CYGPATTERN" ] &&      # TODO: choose: list, glob, or regex?
                    echo "\$arg" | egrep -q "\$GRADLE_CYGPATTERN"
            esac
        then
            arg=\$( cygpath --path --ignore --mixed "\$arg" )
        fi
        # Roll the args around exactly as many times as the number of args.
        # NB: "\$@" above was expanded and captured before the loop began.
        shift
        set -- "\$@" "\$arg"
    done
fi

ARGV=("\$@")
eval set -- \$DEFAULT_JVM_OPTS

IFS=\$'\n' read -rd '' -a JAVA_OPTS_ARR <<< "\$(echo \$JAVA_OPTS | xargs -n1)"
IFS=\$'\n' read -rd '' -a ${optsEnvironmentVar}_ARR <<< "\$(echo \$${optsEnvironmentVar} | xargs -n1)"

exec "\$JAVACMD" "\$@" "\${JAVA_OPTS_ARR[@]}" "\${${optsEnvironmentVar}_ARR[@]}" <% if ( appNameSystemProperty ) { %>"-D${appNameSystemProperty}=\$APP_BASE_NAME" <% } %>-classpath "\$CLASSPATH" <% if ( mainClassName.startsWith('--module ') ) { %>--module-path "\$MODULE_PATH" <% } %>${mainClassName} "\${ARGV[@]}"
